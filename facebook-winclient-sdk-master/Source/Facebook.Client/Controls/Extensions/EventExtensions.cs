namespace Facebook.Client.Controls
{
    using System;

    /// <summary>
    /// Provides extension methods to manage events.
    /// </summary>
    internal static class EventExtensions
    {
        /// <summary>
        /// Raises an event.
        /// </summary>
        /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
        /// <param name="handler">An instance of the event to raise.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        public static void RaiseEvent<T>(this EventHandler<T> handler, object sender, T e)
        {
            if (handler != null)
            {
                handler(sender, e);
            }
        }

        /// <summary>
        /// Raises an event that can be cancelled.
        /// </summary>
        /// <remarks>
        /// The method accepts a callback parameter that is called to determine if event invocation continues. If any
        /// of the event subscribers returns false, invocation stops and the method returns false.
        /// </remarks>
        /// <typeparam name="T">The type of the event data generated by the event.</typeparam>
        /// <param name="handler">An instance of the event to raise.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        /// <param name="cancelInvocation">A predicate that returns true to cancel the invocation.</param>
        /// <returns>False if the event has been cancelled by any of the subscribers.</returns>
        public static bool RaiseEvent<T>(this EventHandler<T> handler, object sender, T e, Func<T, bool> cancelInvocation)
        {
            if (handler != null)
            {
                foreach (EventHandler<T> subscriber in handler.GetInvocationList())
                {
                    subscriber(sender, e);
                    if (cancelInvocation(e))
                    {
                        return false;
                    }
                }
            }

            return true;
        }
    }
}
